/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

import { Route as rootRouteImport } from './routes/__root'
import { Route as TeamsRouteImport } from './routes/teams'
import { Route as ScorigamiRouteImport } from './routes/scorigami'
import { Route as QueryRouteImport } from './routes/query'
import { Route as PlayersRouteImport } from './routes/players'
import { Route as MapRouteImport } from './routes/map'
import { Route as LeadersRouteImport } from './routes/leaders'
import { Route as IndexRouteImport } from './routes/index'
import { Route as TeamIdRouteRouteImport } from './routes/team.$id/route'
import { Route as LeagueIdRouteRouteImport } from './routes/league.$id/route'
import { Route as TeamIdIndexRouteImport } from './routes/team.$id/index'
import { Route as LeagueIdIndexRouteImport } from './routes/league.$id/index'
import { Route as TeamIdStatsRouteImport } from './routes/team.$id/stats'
import { Route as TeamIdRosterRouteImport } from './routes/team.$id/roster'
import { Route as TeamIdGamesRouteImport } from './routes/team.$id/games'

const TeamsRoute = TeamsRouteImport.update({
  id: '/teams',
  path: '/teams',
  getParentRoute: () => rootRouteImport,
} as any)
const ScorigamiRoute = ScorigamiRouteImport.update({
  id: '/scorigami',
  path: '/scorigami',
  getParentRoute: () => rootRouteImport,
} as any)
const QueryRoute = QueryRouteImport.update({
  id: '/query',
  path: '/query',
  getParentRoute: () => rootRouteImport,
} as any)
const PlayersRoute = PlayersRouteImport.update({
  id: '/players',
  path: '/players',
  getParentRoute: () => rootRouteImport,
} as any)
const MapRoute = MapRouteImport.update({
  id: '/map',
  path: '/map',
  getParentRoute: () => rootRouteImport,
} as any)
const LeadersRoute = LeadersRouteImport.update({
  id: '/leaders',
  path: '/leaders',
  getParentRoute: () => rootRouteImport,
} as any)
const IndexRoute = IndexRouteImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => rootRouteImport,
} as any)
const TeamIdRouteRoute = TeamIdRouteRouteImport.update({
  id: '/team/$id',
  path: '/team/$id',
  getParentRoute: () => rootRouteImport,
} as any)
const LeagueIdRouteRoute = LeagueIdRouteRouteImport.update({
  id: '/league/$id',
  path: '/league/$id',
  getParentRoute: () => rootRouteImport,
} as any)
const TeamIdIndexRoute = TeamIdIndexRouteImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => TeamIdRouteRoute,
} as any)
const LeagueIdIndexRoute = LeagueIdIndexRouteImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => LeagueIdRouteRoute,
} as any)
const TeamIdStatsRoute = TeamIdStatsRouteImport.update({
  id: '/stats',
  path: '/stats',
  getParentRoute: () => TeamIdRouteRoute,
} as any)
const TeamIdRosterRoute = TeamIdRosterRouteImport.update({
  id: '/roster',
  path: '/roster',
  getParentRoute: () => TeamIdRouteRoute,
} as any)
const TeamIdGamesRoute = TeamIdGamesRouteImport.update({
  id: '/games',
  path: '/games',
  getParentRoute: () => TeamIdRouteRoute,
} as any)

export interface FileRoutesByFullPath {
  '/': typeof IndexRoute
  '/leaders': typeof LeadersRoute
  '/map': typeof MapRoute
  '/players': typeof PlayersRoute
  '/query': typeof QueryRoute
  '/scorigami': typeof ScorigamiRoute
  '/teams': typeof TeamsRoute
  '/league/$id': typeof LeagueIdRouteRouteWithChildren
  '/team/$id': typeof TeamIdRouteRouteWithChildren
  '/team/$id/games': typeof TeamIdGamesRoute
  '/team/$id/roster': typeof TeamIdRosterRoute
  '/team/$id/stats': typeof TeamIdStatsRoute
  '/league/$id/': typeof LeagueIdIndexRoute
  '/team/$id/': typeof TeamIdIndexRoute
}
export interface FileRoutesByTo {
  '/': typeof IndexRoute
  '/leaders': typeof LeadersRoute
  '/map': typeof MapRoute
  '/players': typeof PlayersRoute
  '/query': typeof QueryRoute
  '/scorigami': typeof ScorigamiRoute
  '/teams': typeof TeamsRoute
  '/team/$id/games': typeof TeamIdGamesRoute
  '/team/$id/roster': typeof TeamIdRosterRoute
  '/team/$id/stats': typeof TeamIdStatsRoute
  '/league/$id': typeof LeagueIdIndexRoute
  '/team/$id': typeof TeamIdIndexRoute
}
export interface FileRoutesById {
  __root__: typeof rootRouteImport
  '/': typeof IndexRoute
  '/leaders': typeof LeadersRoute
  '/map': typeof MapRoute
  '/players': typeof PlayersRoute
  '/query': typeof QueryRoute
  '/scorigami': typeof ScorigamiRoute
  '/teams': typeof TeamsRoute
  '/league/$id': typeof LeagueIdRouteRouteWithChildren
  '/team/$id': typeof TeamIdRouteRouteWithChildren
  '/team/$id/games': typeof TeamIdGamesRoute
  '/team/$id/roster': typeof TeamIdRosterRoute
  '/team/$id/stats': typeof TeamIdStatsRoute
  '/league/$id/': typeof LeagueIdIndexRoute
  '/team/$id/': typeof TeamIdIndexRoute
}
export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths:
    | '/'
    | '/leaders'
    | '/map'
    | '/players'
    | '/query'
    | '/scorigami'
    | '/teams'
    | '/league/$id'
    | '/team/$id'
    | '/team/$id/games'
    | '/team/$id/roster'
    | '/team/$id/stats'
    | '/league/$id/'
    | '/team/$id/'
  fileRoutesByTo: FileRoutesByTo
  to:
    | '/'
    | '/leaders'
    | '/map'
    | '/players'
    | '/query'
    | '/scorigami'
    | '/teams'
    | '/team/$id/games'
    | '/team/$id/roster'
    | '/team/$id/stats'
    | '/league/$id'
    | '/team/$id'
  id:
    | '__root__'
    | '/'
    | '/leaders'
    | '/map'
    | '/players'
    | '/query'
    | '/scorigami'
    | '/teams'
    | '/league/$id'
    | '/team/$id'
    | '/team/$id/games'
    | '/team/$id/roster'
    | '/team/$id/stats'
    | '/league/$id/'
    | '/team/$id/'
  fileRoutesById: FileRoutesById
}
export interface RootRouteChildren {
  IndexRoute: typeof IndexRoute
  LeadersRoute: typeof LeadersRoute
  MapRoute: typeof MapRoute
  PlayersRoute: typeof PlayersRoute
  QueryRoute: typeof QueryRoute
  ScorigamiRoute: typeof ScorigamiRoute
  TeamsRoute: typeof TeamsRoute
  LeagueIdRouteRoute: typeof LeagueIdRouteRouteWithChildren
  TeamIdRouteRoute: typeof TeamIdRouteRouteWithChildren
}

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/teams': {
      id: '/teams'
      path: '/teams'
      fullPath: '/teams'
      preLoaderRoute: typeof TeamsRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/scorigami': {
      id: '/scorigami'
      path: '/scorigami'
      fullPath: '/scorigami'
      preLoaderRoute: typeof ScorigamiRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/query': {
      id: '/query'
      path: '/query'
      fullPath: '/query'
      preLoaderRoute: typeof QueryRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/players': {
      id: '/players'
      path: '/players'
      fullPath: '/players'
      preLoaderRoute: typeof PlayersRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/map': {
      id: '/map'
      path: '/map'
      fullPath: '/map'
      preLoaderRoute: typeof MapRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/leaders': {
      id: '/leaders'
      path: '/leaders'
      fullPath: '/leaders'
      preLoaderRoute: typeof LeadersRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/': {
      id: '/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof IndexRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/team/$id': {
      id: '/team/$id'
      path: '/team/$id'
      fullPath: '/team/$id'
      preLoaderRoute: typeof TeamIdRouteRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/league/$id': {
      id: '/league/$id'
      path: '/league/$id'
      fullPath: '/league/$id'
      preLoaderRoute: typeof LeagueIdRouteRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/team/$id/': {
      id: '/team/$id/'
      path: '/'
      fullPath: '/team/$id/'
      preLoaderRoute: typeof TeamIdIndexRouteImport
      parentRoute: typeof TeamIdRouteRoute
    }
    '/league/$id/': {
      id: '/league/$id/'
      path: '/'
      fullPath: '/league/$id/'
      preLoaderRoute: typeof LeagueIdIndexRouteImport
      parentRoute: typeof LeagueIdRouteRoute
    }
    '/team/$id/stats': {
      id: '/team/$id/stats'
      path: '/stats'
      fullPath: '/team/$id/stats'
      preLoaderRoute: typeof TeamIdStatsRouteImport
      parentRoute: typeof TeamIdRouteRoute
    }
    '/team/$id/roster': {
      id: '/team/$id/roster'
      path: '/roster'
      fullPath: '/team/$id/roster'
      preLoaderRoute: typeof TeamIdRosterRouteImport
      parentRoute: typeof TeamIdRouteRoute
    }
    '/team/$id/games': {
      id: '/team/$id/games'
      path: '/games'
      fullPath: '/team/$id/games'
      preLoaderRoute: typeof TeamIdGamesRouteImport
      parentRoute: typeof TeamIdRouteRoute
    }
  }
}

interface LeagueIdRouteRouteChildren {
  LeagueIdIndexRoute: typeof LeagueIdIndexRoute
}

const LeagueIdRouteRouteChildren: LeagueIdRouteRouteChildren = {
  LeagueIdIndexRoute: LeagueIdIndexRoute,
}

const LeagueIdRouteRouteWithChildren = LeagueIdRouteRoute._addFileChildren(
  LeagueIdRouteRouteChildren,
)

interface TeamIdRouteRouteChildren {
  TeamIdGamesRoute: typeof TeamIdGamesRoute
  TeamIdRosterRoute: typeof TeamIdRosterRoute
  TeamIdStatsRoute: typeof TeamIdStatsRoute
  TeamIdIndexRoute: typeof TeamIdIndexRoute
}

const TeamIdRouteRouteChildren: TeamIdRouteRouteChildren = {
  TeamIdGamesRoute: TeamIdGamesRoute,
  TeamIdRosterRoute: TeamIdRosterRoute,
  TeamIdStatsRoute: TeamIdStatsRoute,
  TeamIdIndexRoute: TeamIdIndexRoute,
}

const TeamIdRouteRouteWithChildren = TeamIdRouteRoute._addFileChildren(
  TeamIdRouteRouteChildren,
)

const rootRouteChildren: RootRouteChildren = {
  IndexRoute: IndexRoute,
  LeadersRoute: LeadersRoute,
  MapRoute: MapRoute,
  PlayersRoute: PlayersRoute,
  QueryRoute: QueryRoute,
  ScorigamiRoute: ScorigamiRoute,
  TeamsRoute: TeamsRoute,
  LeagueIdRouteRoute: LeagueIdRouteRouteWithChildren,
  TeamIdRouteRoute: TeamIdRouteRouteWithChildren,
}
export const routeTree = rootRouteImport
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()
